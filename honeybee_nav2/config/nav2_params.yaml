amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.25
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.25
    base_frame_id: "base_link"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.87
    beam_skip_threshold: 0.3
    do_beamskip: true
    global_frame_id: "map"
    lambda_short: 0.1
    laser_model_type: "likelihood_field_prob"
    laser_likelihood_max_dist: 2.5
    laser_max_range: 20.0
    laser_min_range: 0.35
    max_beams: 150
    max_particles: 3000
    min_particles: 750
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 2
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.5
    update_min_d: 0.25
    z_hit: 0.95
    z_rand: 0.05
    scan_topic: /sensors/lidar_0/scan

bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /platform/odom/filtered
    bt_loop_duration: 10
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.05
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.01
    failure_tolerance: 0.5
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0

    # Goal checker parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.3
      yaw_goal_tolerance: 0.5

    # Controller parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.5
      max_vel_y: 0.0
      max_vel_theta: 1.4
      min_speed_xy: 0.0
      max_speed_xy: 0.5
      min_speed_theta: 0.0
      acc_lim_x: 3.5
      acc_lim_y: 0.0
      acc_lim_theta: 20.0
      decel_lim_x: -3.5
      decel_lim_y: 0.0
      decel_lim_theta: -20.0
      vx_samples: 60
      vy_samples: 1
      vtheta_samples: 20
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: True
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      rolling_window: true
      width: 4
      height: 4
      resolution: 0.05
      footprint: "[ [0.254, 0.2159], [0.254, -0.2159], [-0.254, -0.2159], [-0.254, 0.2159] ]"
      footprint_padding: 0.1
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 2.0
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: False
        footprint_clearing_enabled: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 12
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: lidar depth_cam
        lidar:
          topic: /sensors/lidar_0/scan
          min_obstacle_height: 0.254
          max_obstacle_height: 0.8
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 5.65  # max diagonal of 4m costmap
          raytrace_min_range: 0.0
          obstacle_max_range: 4.0   # 4m costmap range maximum
          obstacle_min_range: 0.2
        depth_cam:
          topic: /sensors/camera_0/points
          min_obstacle_height: 0.1524
          max_obstacle_height: 0.8
          clearing: True
          marking: True
          data_type: "PointCloud2"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.2
      # stvl_layer:
      #   plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"
      #   enabled:                  true
      #   voxel_decay:              15.0  # seconds if linear, e^n if exponential
      #   decay_model:              0     # 0=linear, 1=exponential, -1=persistent
      #   voxel_size:               0.05  # meters
      #   track_unknown_space:      true  # default space is known
      #   mark_threshold:           0     # voxel height
      #   update_footprint_enabled: true
      #   combination_method:       1     # 1=max, 0=override
      #   origin_z:                 0.0   # meters
      #   publish_voxel_map:        false # default off
      #   transform_tolerance:      0.2   # seconds
      #   mapping_mode:             false # default off, saves map not for navigation
      #   map_save_duration:        60.0  # default 60s, how often to autosave
      #   observation_sources:      camera_0 lidar_0
      #   camera_0:
      #     data_type: PointCloud2
      #     topic: /sensors/camera_0/points
      #     marking: true
      #     clearing: true
      #     obstacle_range: 3.0          # meters
      #     min_obstacle_height: 0.3     # default 0, meters
      #     max_obstacle_height: 2.0     # default 3, meters
      #     expected_update_rate: 0.0    # default 0, if not updating at this rate at least, remove from buffer
      #     observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
      #     inf_is_valid: false          # default false, for laser scans
      #     filter: "passthrough"        # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on 
      #     voxel_min_points: 0          # default 0, minimum points per voxel for voxel filter
      #     clear_after_reading: true    # default false, clear the buffer after the layer gets readings from it
      #     max_z: 3.0                  # default 0, meters
      #     min_z: 0.1                  # default 10, meters
      #     vertical_fov_angle: 0.8745  # default 0.7, radians
      #     horizontal_fov_angle: 1.048 # default 1.04, radians
      #     decay_acceleration: 15.0    # default 0, 1/s^2. If laser scanner MUST be 0
      #     model_type: 0                # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
      #   lidar_0:
      #     data_type: PointCloud2
      #     topic: /sensors/lidar_0/points
      #     marking: true
      #     clearing: true
      #     obstacle_range: 3.0          # meters
      #     min_obstacle_height: 0.3     # default 0, meters
      #     max_obstacle_height: 2.0     # default 3, meters
      #     expected_update_rate: 0.0    # default 0, if not updating at this rate at least, remove from buffer
      #     observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
      #     inf_is_valid: false          # default false, for laser scans
      #     filter: "voxel"        # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on     voxel_min_points: 0          # default 0, minimum points per voxel for voxel filter
      #     clear_after_reading: true    # default false, clear the buffer after the layer gets readings from it
      #     enabled: true                #default true, can be toggled on/off with associated service call
      #     max_z: 10.0                  # default 0, meters
      #     min_z: 1.0                  # default 10, meters
      #     vertical_fov_angle: 0.523   # default 0.7, radians. For 3D lidars it's the symmetric FOV about the planar axis.
      #     vertical_fov_padding: 0.05    # 3D Lidar only. Default 0, in meters 
      #     horizontal_fov_angle: 6.29  # 3D lidar scanners like the VLP16 have 360 deg horizontal FOV.
      #     decay_acceleration: 5.0     # default 0, 1/s^2. 
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: True
      update_frequency: 1.0
      publish_frequency: 1.0
      width: 40
      height: 40
      origin_x: -20.0
      origin_y: -20.0
      global_frame: map
      robot_base_frame: base_link
      # While using NavFn, set as largest robot radius since we're not operating in confined spaces & SE2 footprint not currently used in global planning
      # footprint: "[ [0.254, 0.2159], [0.254, -0.2159], [-0.254, -0.2159], [-0.254, 0.2159] ]"
      robot_radius: 0.333
      footprint_padding: 0.1
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "voxel_layer", "inflation_layer"]
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: False
        footprint_clearing_enabled: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 12
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: lidar depth_cam
        lidar:
          topic: /sensors/lidar_0/scan
          min_obstacle_height: 0.254
          max_obstacle_height: 0.8
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 11.0
          raytrace_min_range: 0.0
          obstacle_max_range: 10.0
          obstacle_min_range: 0.2
        depth_cam:
          topic: /sensors/camera_0/points
          min_obstacle_height: 0.1524
          max_obstacle_height: 0.8
          clearing: True
          marking: True
          data_type: "PointCloud2"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.2
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 2.0
      # stvl_layer:
      #   plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"
      #   enabled:                  true
      #   voxel_decay:              15.0  # seconds if linear, e^n if exponential
      #   decay_model:              0     # 0=linear, 1=exponential, -1=persistent
      #   voxel_size:               0.05  # meters
      #   track_unknown_space:      true  # default space is known
      #   mark_threshold:           0     # voxel height
      #   update_footprint_enabled: true
      #   combination_method:       1     # 1=max, 0=override
      #   origin_z:                 0.0   # meters
      #   publish_voxel_map:        false # default off
      #   transform_tolerance:      0.2   # seconds
      #   mapping_mode:             false # default off, saves map not for navigation
      #   map_save_duration:        60.0  # default 60s, how often to autosave
      #   observation_sources:      camera_0 lidar_0
      #   camera_0:
      #     data_type: PointCloud2
      #     topic: /sensors/camera_0/points
      #     marking: true
      #     clearing: true
      #     obstacle_range: 3.0          # meters
      #     min_obstacle_height: 0.3     # default 0, meters
      #     max_obstacle_height: 2.0     # default 3, meters
      #     expected_update_rate: 0.0    # default 0, if not updating at this rate at least, remove from buffer
      #     observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
      #     inf_is_valid: false          # default false, for laser scans
      #     filter: "passthrough"        # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on 
      #     voxel_min_points: 0          # default 0, minimum points per voxel for voxel filter
      #     clear_after_reading: true    # default false, clear the buffer after the layer gets readings from it
      #     max_z: 3.0                  # default 0, meters
      #     min_z: 0.1                  # default 10, meters
      #     vertical_fov_angle: 0.8745  # default 0.7, radians
      #     horizontal_fov_angle: 1.048 # default 1.04, radians
      #     decay_acceleration: 15.0    # default 0, 1/s^2. If laser scanner MUST be 0
      #     model_type: 0                # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
      #   lidar_0:
      #     data_type: PointCloud2
      #     topic: /sensors/lidar_0/points
      #     marking: true
      #     clearing: true
      #     obstacle_range: 3.0          # meters
      #     min_obstacle_height: 0.3     # default 0, meters
      #     max_obstacle_height: 2.0     # default 3, meters
      #     expected_update_rate: 0.0    # default 0, if not updating at this rate at least, remove from buffer
      #     observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
      #     inf_is_valid: false          # default false, for laser scans
      #     filter: "voxel"        # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on     voxel_min_points: 0          # default 0, minimum points per voxel for voxel filter
      #     clear_after_reading: true    # default false, clear the buffer after the layer gets readings from it
      #     enabled: true                #default true, can be toggled on/off with associated service call
      #     max_z: 10.0                  # default 0, meters
      #     min_z: 1.0                  # default 10, meters
      #     vertical_fov_angle: 0.523   # default 0.7, radians. For 3D lidars it's the symmetric FOV about the planar axis.
      #     vertical_fov_padding: 0.05    # 3D Lidar only. Default 0, in meters 
      #     horizontal_fov_angle: 6.29  # 3D lidar scanners like the VLP16 have 360 deg horizontal FOV.
      #     decay_acceleration: 5.0     # default 0, 1/s^2. 
      always_send_full_costmap: True

planner_server:
  ros__parameters:
    use_sim_time: True
    expected_planner_frequency: 20.0
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.25
      use_astar: false
      allow_unknown: true

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    use_sim_time: true
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.6
    rotational_acc_lim: 3.5

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 1000

velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 20.0
    scale_velocities: True
    feedback: "OPEN_LOOP"
    max_velocity: [0.5, 0.0, 1.4]
    min_velocity: [-0.5, 0.0, -1.4]
    max_accel: [3.5, 0.0, 20.0]
    max_decel: [-3.5, 0.0, -20.0]
    odom_topic: "/platform/odom/filtered"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0

map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: True

robot_state_publisher:
  ros__parameters:
    use_sim_time: True
